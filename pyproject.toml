[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "nullaprop"
version = "0.1.0"
description = "JAX/Equinox implementation of NoProp: Training Neural Networks Without Back-propagation or Forward-propagation"
readme = "README.md"
requires-python = ">=3.11"
license = {file = "LICENSE"}
authors = [
    {name = "nullaprop JAX Contributors", email = "5038100+dimarkov@users.noreply.github.com"}
]
keywords = [
    "machine learning",
    "deep learning", 
    "neural networks",
    "jax",
    "equinox",
    "diffusion models",
    "no backpropagation",
    "parallel training"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "jax[cuda]>=0.6.1",
    "equinox>=0.10.0",
    "optax>=0.2.0",
    "datasets>=2.0.0",
    "matplotlib>=3.0.0",
    "numpy>=1.20.0",
    "jax-dataloader>=0.1.3"
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov",
    "black",
    "isort",
    "flake8",
    "mypy",
    "pre-commit",
]
docs = [
    "sphinx",
    "sphinx-rtd-theme",
    "nbsphinx",
    "pandoc",
]
notebooks = [
    "jupyter",
    "ipykernel",
    "ipywidgets",
]
all = [
    "nullaprop[dev,docs,notebooks]"
]

[project.urls]
Homepage = "https://github.com/dimarkov/nullaprop"
Documentation = "https://github.com/dimarkov/nullaprop#readme"
Repository = "https://github.com/dimarkov/nullaprop.git"
"Bug Tracker" = "https://github.com/dimarkov/nullaprop/issues"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["nullaprop*"]
exclude = ["tests*", "docs*", "examples*"]

# Black configuration
[tool.black]
line-length = 120
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120
known_first_party = ["nullaprop"]
known_third_party = ["jax", "equinox", "optax", "numpy", "matplotlib", "datasets"]

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["."]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "--verbose --cov=nullaprop --cov-report=term-missing --cov-report=html"

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "jax.*",
    "equinox.*",
    "optax.*",
    "datasets.*",
    "matplotlib.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["nullaprop"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
